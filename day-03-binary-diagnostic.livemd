<!-- vim: syntax=markdown -->

# Day 3: Binary Diagnostic

## Introduction

The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.

The diagnostic report (your puzzle input) consists of a list of binary numbers which, when decoded properly, can tell you many useful things about the conditions of the submarine. The first parameter to check is the power consumption.

You need to use the binary numbers in the diagnostic report to generate two new binary numbers (called the gamma rate and the epsilon rate). The power consumption can then be found by multiplying the gamma rate by the epsilon rate.

### Part 2

Next, you should verify the life support rating, which can be determined by multiplying the oxygen generator rating by the CO2 scrubber rating.

Both the oxygen generator rating and the CO2 scrubber rating are values that can be found in your diagnostic report - finding them is the tricky part. Both values are located using a similar process that involves filtering out values until only one remains. Before searching for either rating value, start with the full list of binary numbers from your diagnostic report and consider just the first bit of those numbers. Then:

* Keep only numbers selected by the bit criteria for the type of rating value for which you are searching. Discard numbers which do not match the bit criteria.
* If you only have one number left, stop; this is the rating value for which you are searching.
* Otherwise, repeat the process, considering the next bit to the right.

The bit criteria depends on which type of rating value you want to find:

* To find oxygen generator rating, determine the most common value (0 or 1) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 1 in the position being considered.
* To find CO2 scrubber rating, determine the least common value (0 or 1) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 0 in the position being considered.

[https://adventofcode.com/2021/day/3](https://adventofcode.com/2021/day/3)

## Code

```elixir
defmodule Day3 do
  use Bitwise, only_operators: true

  def taskPartOne(data) do
    most_common_bits =
      data
      |> Enum.map(&String.to_charlist/1)
      |> List.zip()
      |> Enum.map(&Tuple.to_list/1)
      |> Enum.map(&most_common_bit/1)

    gamma =
      most_common_bits
      |> Enum.reduce(0, fn bit, acc ->
        acc |> Bitwise.<<<(1) |> Bitwise.|||(bit)
      end)

    bit_mask =
      most_common_bits
      |> Enum.reduce(0, fn _digit, acc -> acc <<< 1 ||| 1 end)

    epsilon = ~~~gamma &&& bit_mask

    gamma * epsilon
  end

  defp most_common_bit(data, acc \\ {0, 0})

  defp most_common_bit([?0 | tail], {count_zero, count_one}),
    do: most_common_bit(tail, {count_zero + 1, count_one})

  defp most_common_bit([?1 | tail], {count_zero, count_one}),
    do: most_common_bit(tail, {count_zero, count_one + 1})

  defp most_common_bit([], {count_zero, count_one}) when count_zero > count_one, do: 0
  defp most_common_bit([], {count_zero, count_one}) when count_zero < count_one, do: 1
  defp most_common_bit(_data, _acc), do: :equal

  def taskPartTwo(data) do
    list =
      data
      |> Enum.map(&String.to_charlist/1)

    oxygen = filter_list(List.zip([list, list]), 1, false)
    o2 = filter_list(List.zip([list, list]), 0, true)

    oxygen * o2
  end

  defp filter_list(list, keep_bit, use_least_common) do
    mcb =
      list
      |> Enum.map(fn {_list, filter} -> List.first(filter) end)
      |> most_common_bit()

    mcb =
      case {mcb, use_least_common} do
        {0, false} -> 0
        {1, false} -> 1
        {0, true} -> 1
        {1, true} -> 0
        {:equal, _} -> :equal
      end

    filter_bit =
      case mcb do
        :equal -> keep_bit + ?0
        bit -> bit + ?0
      end

    list =
      list
      |> Enum.filter(fn {_list, filter} ->
        case filter do
          [^filter_bit | _tail] -> true
          _ -> false
        end
      end)
      |> Enum.map(fn {list, [_ | filter]} ->
        {list, filter}
      end)

    case list do
      [{list, _}] ->
        list
        |> Enum.map(fn element ->
          case element do
            ?0 -> 0
            ?1 -> 1
          end
        end)
        |> Enum.reduce(0, fn bit, acc ->
          acc
          |> Bitwise.<<<(1)
          |> Bitwise.|||(bit)
        end)

      list ->
        filter_list(list, keep_bit, use_least_common)
    end
  end
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule Test do
  use ExUnit.Case, async: false

  test "part one" do
    data = [
      "00100",
      "11110",
      "10110",
      "10111",
      "10101",
      "01111",
      "00111",
      "11100",
      "10000",
      "11001",
      "00010",
      "01010"
    ]

    assert Day3.taskPartOne(data) == 198
  end

  test "part two" do
    data = [
      "00100",
      "11110",
      "10110",
      "10111",
      "10101",
      "01111",
      "00111",
      "11100",
      "10000",
      "11001",
      "00010",
      "01010"
    ]

    assert Day3.taskPartTwo(data) == 230
  end
end

ExUnit.run()
```

## Import

```elixir
defmodule Importer do
  def readFile(file_url) do
    {:ok, file_data} = File.read(file_url)

    file_data
    |> String.split("\n")
  end

  def transform(line) do
    line
  end
end

input_data =
  Importer.readFile(
    "/Users/matthias/Projekte/advent-of-code-2021/input_data/day03-binary-diagnostic.txt"
  )
  |> Enum.map(&Importer.transform/1)
```

## Solution

```elixir
# First Part
845_186 = Day3.taskPartOne(input_data)
```

```elixir
# Second Part
4_636_702 = Day3.taskPartTwo(input_data)
```
