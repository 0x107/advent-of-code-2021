<!-- vim: syntax=markdown -->

# Day 5: Hydrothermal Venture

## Introduction

You come across a field of hydrothermal vents on the ocean floor! These vents constantly produce large, opaque clouds, so it would be best to avoid them if possible.

[https://adventofcode.com/2021/day/5](https://adventofcode.com/2021/day/5)

## Code

```elixir
defmodule VentureLine do
  defstruct start_point: {0, 0}, end_point: {0, 0}

  def line_points(
        %VentureLine{start_point: {x1, y1}, end_point: {x2, y2}},
        include_diagnonals \\ false
      ) do
    cond do
      # single venture
      x1 === x2 && y1 === y2 ->
        [{x1, y2}]

      # vertical line
      x1 == x2 ->
        for y <- min(y1, y2)..max(y1, y2), do: {x1, y}

      # horizontal line
      y1 == y2 ->
        for x <- min(x1, x2)..max(x1, x2), do: {x, y1}

      # diagonal
      include_diagnonals ->
        {x1, y1, x2, y2} = if x1 < x2, do: {x1, y1, x2, y2}, else: {x2, y2, x1, y1}
        a = (x2 - x1) / (y2 - y1)
        b = y1 - a * x1
        for x <- x1..x2, do: {x, trunc(x * a + b)}

      # ignore diagnoals
      true ->
        []
    end
  end
end
```

```elixir
defmodule Day5 do
  def taskPartOne(venture_lines) do
    venture_lines
    |> Enum.map(&VentureLine.line_points/1)
    |> number_of_intersections()
  end

  def taskPartTwo(venture_lines) do
    venture_lines
    |> Enum.map(&VentureLine.line_points(&1, true))
    |> number_of_intersections()
  end

  defp number_of_intersections(venture_points) do
    venture_points
    |> List.flatten()
    |> Enum.frequencies()
    |> Enum.reduce(0, fn {_k, v}, acc -> if v >= 2, do: acc + 1, else: acc end)
  end
end
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule Test do
  use ExUnit.Case, async: false

  test "single venture" do
    line = %VentureLine{start_point: {3, 7}, end_point: {3, 7}}
    assert VentureLine.line_points(line) == [{3, 7}]
  end

  test "vertical venture line" do
    line = %VentureLine{start_point: {1, 1}, end_point: {1, 3}}
    assert VentureLine.line_points(line) == [{1, 1}, {1, 2}, {1, 3}]
  end

  test "diagonal venture line" do
    line = %VentureLine{start_point: {9, 7}, end_point: {7, 9}}
    assert VentureLine.line_points(line, true) == [{7, 9}, {8, 8}, {9, 7}]
  end
end

ExUnit.run()
```

## Import

```elixir
defmodule Importer do
  def readFile(file_url) do
    {:ok, file_data} = File.read(file_url)

    file_data
    |> String.split("\n")
  end

  def transform(lines) do
    lines
    |> Enum.map(fn line ->
      ~r/(?<x1>[0-9]*),(?<y1>[0-9]*) -> (?<x2>[0-9]*),(?<y2>[0-9]*)/
      |> Regex.named_captures(line)
      |> Kernel.then(&for {k, v} <- &1, into: %{}, do: {k, String.to_integer(v)})
    end)
    |> Enum.map(fn %{"x1" => x1, "y1" => y1, "x2" => x2, "y2" => y2} ->
      %VentureLine{start_point: {x1, y1}, end_point: {x2, y2}}
    end)
  end
end

input_data =
  Importer.readFile(
    "/Users/matthias/Projekte/advent-of-code-2021/input_data/day05-hydrothermal-venture.txt"
  )
  |> Importer.transform()
```

## Solution

```elixir
# First Part
6548 = Day5.taskPartOne(input_data)
```

```elixir
# Second Part
19663 = Day5.taskPartTwo(input_data)
```
